library(shiny)
runApp()
head(diamonds)
dataset <- diamonds
library(ggplot2)
dataset <- diamonds
head(diamonds)
p = ggplot(dataset, aes(x = carat, y = price, colour = cut)) + geom_line()
p
p = ggplot(dataset, aes(x = carat, y = price, colour = cut)) + geom_point()
p
runApp()
library(shiny)
library(ggplot2)
runApp()
runApp()
input = list(numClust = 4)
whiskies <- read.csv("whiskies.txt", row.names = 1, stringsAsFactors = FALSE)
whiskies_k <- scale(whiskies[2:13])  # rescale selected vars for kmeans
fit = kmeans(whiskies_k, input$numClust)
df = fit$centers
rownames(df)
dfOut = data.frame(Cluster = c(), Taste = c(), Value = c())
for(cl in 1:ncol(df))
{
tmpDf = data.frame(Cluster = rownames(df), Taste = colnames(df)[cl], Value = df[,cl])
dfOut = rbind(dfOut, tmpDf)
}
p = ggplot(dfOut, aes(x = Cluster, y = Value, fill = Taste)) + geom_bar()
p
p = ggplot(dfOut, aes(x = Cluster, y = Value, fill = Taste)) + geom_bar(stat="identity")
p
p = ggplot(dfOut, aes(x = Cluster, y = Value, fill = Taste)) +
geom_bar(stat="identity") +
facet_grid(. ~ Taste)
p
p = ggplot(dfOut, aes(x = Cluster, y = Value, fill = Taste)) +
geom_bar(stat="identity") +
facet_grid(. ~ Cluster)
p
p = ggplot(dfOut, aes(fill = Cluster, y = Value, x = Taste)) +
geom_bar(stat="identity") +
facet_grid(. ~ Cluster)
p
runApp()
runApp()
install.packages("shiny")
require(shiny)
runApp()
library("ggmap")
fit = kmeans(whiskies_k, input$numClust)
whiskies <- data.frame(whiskies, fit$cluster)
whiskies$fit.cluster <- as.factor(whiskies$fit.cluster)
filterWhiskies = whiskies
filterWhiskies <- cbind(filterWhiskies, geocode(paste(whiskies$Location, "Scotland", sep = " ,")))
whiskyMap <- qmap(location = "Scotland", zoom = 6, legend = "topleft", maptype = "terrain",
color = "bw", darken = 0.5)
whiskyMap + geom_point(data = filterWhiskies, aes(x = filterWhiskies.Latitude, y = filterWhiskies.Longitude,
colour = fit.cluster, size = 2))
head(filterWhiskies)
whiskyMap + geom_point(data = filterWhiskies, aes(x = lat, y = lat,
colour = fit.cluster, size = 2))
filterWhiskies <- cbind(filterWhiskies, geocode(paste(filterWhiskies$Location, "Scotland", sep = " ,")))
head(filterWhiskies)
whiskies <- read.csv("whiskies.txt", row.names = 1, stringsAsFactors = FALSE)
whiskies_k <- scale(whiskies[2:13])  # rescale selected vars for kmeans
fit = kmeans(whiskies_k, input$numClust)
whiskies <- data.frame(whiskies, fit$cluster)
whiskies$fit.cluster <- as.factor(whiskies$fit.cluster)
filterWhiskies = whiskies
filterWhiskies <- cbind(filterWhiskies, geocode(paste(filterWhiskies$Location, "Scotland", sep = " ,")))
whiskyMap <- qmap(location = "Scotland", zoom = 6, legend = "topleft", maptype = "terrain",
color = "bw", darken = 0.5)
whiskyMap + geom_point(data = filterWhiskies, aes(x = lat, y = lat,
colour = fit.cluster, size = 2))
head(filterWhiskies)
whiskyMap <- qmap(location = "Scotland", zoom = 6, legend = "topleft", maptype = "terrain",
color = "bw", darken = 0.5)
whiskyMap + geom_point(data = filterWhiskies, aes(x = whiskies.Latitude,  y = whiskies.Longitude,
colour = fit.cluster, size = 2))
whiskyMap + geom_point(data = filterWhiskies, aes(x = filterWhiskies.Latitude,  y = filterWhiskies.Longitude,
colour = fit.cluster, size = 2))
whiskies <- cbind(whiskies, geocode(paste(whiskies$Location, "Scotland", sep = " ,")))
whiskyMap <- qmap(location = "Scotland", zoom = 6, legend = "topleft", maptype = "terrain",
color = "bw", darken = 0.5)
whiskyMap + geom_point(data = whiskies, aes(x = whiskies.Latitude, y = whiskies.Longitude,
colour = fit.cluster, size = 2))
whiskies.coord <- data.frame(whiskies$Latitude, whiskies$Longitude)
coordinates(whiskies.coord) = ~whiskies.Latitude + whiskies.Longitude
library(maptools)
library(rgdal)
whiskies.coord <- data.frame(whiskies$Latitude, whiskies$Longitude)
coordinates(whiskies.coord) = ~whiskies.Latitude + whiskies.Longitude
proj4string(whiskies.coord) = CRS("+init=epsg:27700")  # Specify that our coords are in osgb grid coord
whiskies.coord <- spTransform(whiskies.coord, CRS("+init=epsg:4326"))  # spTransform to convert osgb grid to lat/lon
whiskies <- cbind(whiskies, whiskies.coord)
whiskies <- cbind(whiskies, geocode(paste(whiskies$Location, "Scotland", sep = " ,")))
whiskyMap <- qmap(location = "Scotland", zoom = 6, legend = "topleft", maptype = "terrain",
color = "bw", darken = 0.5)
whiskyMap + geom_point(data = whiskies, aes(x = whiskies.Latitude, y = whiskies.Longitude,
colour = fit.cluster, size = 2))
require(shiny)
runApp()
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp(appName="whiskyTastings")
shinyapps::setAccountInfo(name="ojessen", token="A1A410F27E8010CD344BBCF53E70E251", secret="vVH28aw5J9T4mztBQO1xhpLJkH0qZPfEFWKeBbjm")
deployApp(appName="whiskyTastings")
runApp()
deployApp(appName="whiskyTastings")
deployApp(appName="whiskyTastings")
shinyapps::configureApp("whiskyTastings", size="medium")
runApp()
whiskies <- read.csv("whiskies.txt", row.names = 1, stringsAsFactors = FALSE)
whiskies_k <- scale(whiskies[2:13])  # rescale selected vars for kmeans
fit = kmeans(whiskies_k, input$numClust)
input = list(numClust = 4)
fit = kmeans(whiskies_k, input$numClust)
whiskies <- data.frame(whiskies, fit$cluster)
whiskies[which(whiskies$fit.cluster == input$whichClust),1]
head(whiskies)
input$whichClust
input$whichClust = 1
whiskies[which(whiskies$fit.cluster == input$whichClust),1]
whiskies[which(whiskies$fit.cluster == input$whichClust),1, drop = FALSE]
runApp()
deployApp(appName="whiskyTastings")
t(fit)
t(fit$centers)
runApp()
deployApp(appName="whiskyTastings")
runApp()
deployApp(appName="whiskyTastings")
devtools::install_github("shiny", "rstudio")
require(shiny)
runApp()
runApp()
library(shiny)
library(ggplot2)
set.seed(1)
input = list(numClust = 4)
fit = kmeans(whiskies_k, input$numClust)
whiskies <- read.csv("whiskies.txt", row.names = 1, stringsAsFactors = FALSE)
whiskies_k <- scale(whiskies[2:13])  # rescale selected vars for kmeans
set.seed(1)
fit = kmeans(whiskies_k, input$numClust)
fit
input$whichClust = 2
whiskies[which(whiskies$fit.cluster == input$whichClust),1]
whiskies <- data.frame(whiskies, fit$cluster)
whiskies[which(whiskies$fit.cluster == input$whichClust),1]
runApp()
paste(whiskies[which(whiskies$fit.cluster == input$whichClust),1])
paste(whiskies[which(whiskies$fit.cluster == input$whichClust),1], collapse=", ")
paste(paste(whiskies[which(whiskies$fit.cluster == input$whichClust),1], collapse=", "),".")
paste0(paste(whiskies[which(whiskies$fit.cluster == input$whichClust),1], collapse=", "),".")
runApp()
runApp()
fit
fit$centers
fit$center[input$whichClust,]>1
colnames(fit$centers[which(fit$center[input$whichClust,]>1)])
colnames(fit$centers)
colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
lovBals =  colnames(fit$centers)[which(fit$center[input$whichClust,]<-1)]
lovBals =  colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
lowVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
lowVals
lowVals =  paste(colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)], collapse = ", ")
lowVals
highVals = paste(colnames(fit$centers)[which(fit$center[input$whichClust,]>1)], collapse = ", ")
highVals
highVals = paste(colnames(fit$centers)[which(fit$center[input$whichClust,]>1)], collapse = ", ")
highVals
colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
fit$center
input$whichClust
fit = kmeans(whiskies_k, input$numClust)
fit$centers
highVals = paste(colnames(fit$centers)[which(fit$center[input$whichClust,]>1)], collapse = ", ")
lowVals =  paste(colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)], collapse = ", ")
highVals
fit$centers
set.seed(1)
fit = kmeans(whiskies_k, input$numClust)
highVals = paste(colnames(fit$centers)[which(fit$center[input$whichClust,]>1)], collapse = ", ")
lowVals =  paste(colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)], collapse = ", ")
highVals
lowVals
highVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
highVals
highValsTxt = paste("high values of:",highVals, collapse = ", ")
highValsTxt
highValsTxt = paste("high values of:",paste(highVals, collapse = ", "))
highValsTxt
lowValsTxt =  paste("low values of:",paste(lowVals, collapse = ", "))
lowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
lowValsTxt =  paste("low values of:",paste(lowVals, collapse = ", "))
lowValsTxt
out = paste0("Cluster ", input$whichClust, " is characterized by ", highValsTxt, " and by ", lowValsTxt, ".")
out
runApp()
extHighVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
extHighValsTxt = paste("extreme high values of:",paste(highVals, collapse = ", "))
extLowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
extLowValsTxt =  paste("extreme low values of:",paste(lowVals, collapse = ", "))
highVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>0.5)]
highValsTxt = paste("high values of:",paste(highVals, collapse = ", "))
lowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -0.5)]
lowValsTxt =  paste("low values of:",paste(lowVals, collapse = ", "))
testLength =  length(extHighVals)>0 & length(extLowVals)>0& length(highVals)>0 & length(lowVals)>0
testLength
testLength =  c(length(extHighVals)>0 , length(extLowVals)>0, length(highVals)>0 , length(lowVals)>0)
testLength
posCases = data.frame(c(T,T,T,T),
c(T,T,T,F),
c(T,T,F,F),
c(F,F,F,F),
c(F,T,T,T),
c(F,T,F,T),
c(F,T,F,F),
c(F,F,T,T),
c(F,F,T,F),
c(F,F,F,T))
posCases
1:length(posCases)
names(posCases) = 1:length(posCases)
which(posCases == testLength)
testLength
case
testLength =  c(length(extHighVals)>0 , length(extLowVals)>0, length(highVals)>0 , length(lowVals)>0)
posCases = data.frame(c(T,T,T,T),
c(T,T,T,F),
c(T,T,F,F),
c(F,F,F,F),
c(F,T,T,T),
c(F,T,F,T),
c(F,T,F,F),
c(F,F,T,T),
c(F,F,T,F),
c(F,F,F,T))
names(posCases) = 1:length(posCases)
for(case in 1:length(posCases))
{
if(all(testLength == posCases[case]))
{
selCase = case
}
}
selCase
runApp()
runApp()
runApp()
extHighVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
extHighValsTxt = paste("extreme high values of:",paste(highVals, collapse = ", "))
extLowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
extLowValsTxt =  paste("extreme low values of:",paste(lowVals, collapse = ", "))
highVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>0.5)]
highVals %in% extHighVals
highVals[which(!(highVals %in% extHighVals))]
extHighVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
extHighValsTxt = paste("extreme high values of:",paste(highVals, collapse = ", "))
extLowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
extLowValsTxt =  paste("extreme low values of:",paste(lowVals, collapse = ", "))
highVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>0.5)]
highVals = highVals[which(!(highVals %in% extHighVals))]
highValsTxt = paste("high values of:",paste(highVals, collapse = ", "))
lowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -0.5)]
lowVals = lowVals[which(!(lowVals %in% extLowVals))]
lowValsTxt =  paste("low values of:",paste(lowVals, collapse = ", "))
if(length(extHighVals)>0 & length(extLowVals)>0)
{
out1 = paste0("Cluster ", input$whichClust, " is characterized by ", extHighValsTxt," and ", extLowValsTxt,".")
} else if(length(extHighVals) > 0)
{
out1 = paste0("Cluster ", input$whichClust, " is characterized by ", extHighValsTxt,".")
}else if(length(extLowVals) > 0)
{
out1 = paste0("Cluster ", input$whichClust, " is characterized by ", extLowValsTxt,".")
}else
{
out1 = paste0("Cluster ", input$whichClust, " is not characterized by extreme high or low values in any taste.")
}
if(length(highVals)>0 & length(lowVals)>0)
{
out2 = paste0("Cluster ", input$whichClust, " is characterized by ", highValsTxt," and ", lowValsTxt,".")
} else if(length(highVals) > 0)
{
out2 = paste0("Cluster ", input$whichClust, " is characterized by ", highValsTxt,".")
}else if(length(lowVals) > 0)
{
out2 = paste0("Cluster ", input$whichClust, " is characterized by ", lowValsTxt,".")
}else
{
out2 = paste0("Cluster ", input$whichClust, " is not characterized by high or low values in any taste.")
}
paste(out1, out2,sep = "\n")
lowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -0.5)]
owVals %in% extLowVals
lowVals %in% extLowVals
lowVals
extLowVals
lowVals[which(!(lowVals %in% extLowVals))]
runApp()
input = list(numClust = 4, whichClust = 1)
set.seed(1)
whiskies <- read.csv("whiskies.txt", row.names = 1, stringsAsFactors = FALSE)
whiskies_k <- scale(whiskies[2:13])  # rescale selected vars for kmeans
fit = kmeans(whiskies_k, input$numClust)
extHighVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
extHighValsTxt = paste("extreme high values of:",paste(highVals, collapse = ", "))
extHighVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>1)]
extHighValsTxt = paste("extreme high values of:",paste(extHighVals, collapse = ", "))
extLowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -1)]
extLowValsTxt =  paste("extreme low values of:",paste(extLowValsTxt, collapse = ", "))
extLowValsTxt =  paste("extreme low values of:",paste(extLowVals, collapse = ", "))
highVals =  colnames(fit$centers)[which(fit$center[input$whichClust,]>0.5)]
if(length(highVals) > 0)
highVals = highVals[which(!(highVals %in% extHighVals))]
highValsTxt = paste("high values of:",paste(highVals, collapse = ", "))
lowVals = colnames(fit$centers)[which(fit$center[input$whichClust,]< -0.5)]
if(length(lowVals) > 0)
lowVals = lowVals[which(!(lowVals %in% extLowVals))]
lowValsTxt =  paste("low values of:",paste(lowVals, collapse = ", "))
if(length(extHighVals)>0 & length(extLowVals)>0)
{
out1 = paste0("Cluster ", input$whichClust, " is characterized by ", extHighValsTxt," and ", extLowValsTxt,".")
} else if(length(extHighVals) > 0)
{
out1 = paste0("Cluster ", input$whichClust, " is characterized by ", extHighValsTxt,".")
}else if(length(extLowVals) > 0)
{
out1 = paste0("Cluster ", input$whichClust, " is characterized by ", extLowValsTxt,".")
}else
{
out1 = paste0("Cluster ", input$whichClust, " is not characterized by extreme high or low values in any taste.")
}
if(length(highVals)>0 & length(lowVals)>0)
{
out2 = paste0("Cluster ", input$whichClust, " is characterized by ", highValsTxt," and ", lowValsTxt,".")
} else if(length(highVals) > 0)
{
out2 = paste0("Cluster ", input$whichClust, " is characterized by ", highValsTxt,".")
}else if(length(lowVals) > 0)
{
out2 = paste0("Cluster ", input$whichClust, " is characterized by ", lowValsTxt,".")
}else
{
out2 = paste0("Cluster ", input$whichClust, " is not characterized by high or low values in any taste.")
}
paste(out1, out2,sep = "\n")
runApp()
whiskies <- read.csv("whiskies.txt", row.names = 1, stringsAsFactors = FALSE)
whiskies_k <- scale(whiskies[2:13])  # rescale selected vars for kmeans
head(whiskies_k)
rows = c(1,5)
df = cbind(whiskies$Distillery[rows], whiskies_k[rows,])
df
df = data.frame(whiskies$Distillery[rows], whiskies_k[rows,])
df
df = data.frame(Distillery = whiskies$Distillery[rows], whiskies_k[rows,])
df
runApp()
require(shinyapps)
deployApp(appName="whiskyTastingsApp")
shinyapps::configureApp("whiskyTastingsApp", size="medium")
runApp()
input = list(numClust = 4)
fit = kmeans(whiskies_k, input$numClust)
fit$cluster
runApp()
str(fit$cluster)
runApp()
deployApp(appName="whiskyTastingsApp")
runApp()
deployApp(appName="whiskyTastingsApp")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(df)
View(dfOut)
